openapi: 3.0.3
info:
  title: "RSS Reader API (Supabase-based)"
  description: >
    Supabase AuthとPostgresテーブルを活用したRSSリーダー機能です。
    購読(subscription)・お気に入り(favorites)・タグ(tags)管理に対応し、
    更新間隔(interval)をもとに定期処理(Cron + Bull)でRSSフィードを取得します。
  version: "1.0.0"

servers:
  - url: "http://localhost:3000/api/v1"
    description: "Local development"

tags:
  - name: Auth
    description: "認証・アカウント管理関連 (Supabase Auth連携)"
  - name: Favorites
    description: "お気に入り登録関連"
  - name: Feed
    description: "フィード購読やフィードアイテム操作関連"
  - name: Tags
    description: "タグの作成・更新・削除・紐付け関連"
  - name: Health
    description: "サービスのヘルスチェック"

paths:
  # 1. Auth
  /auth/signup:
    post:
      tags:
        - Auth
      summary: "ユーザー新規登録"
      description: "メールアドレス/パスワード/ユーザー名を指定して新規登録します。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpRequest"
      responses:
        '201':
          description: "新規ユーザー登録成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthGenericResponse"
        '400':
          description: "入力データエラー"
        '409':
          description: "メールまたはユーザー名が既に使用中"

  /auth/login:
    post:
      tags:
        - Auth
      summary: "ログイン"
      description: "メールアドレス/パスワードでログインし、Supabaseのセッション情報を返却します。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        '200':
          description: "ログイン成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthGenericResponse"
        '401':
          description: "認証失敗"

  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: "パスワードリセットメール送信"
      description: "登録済みユーザーのメール宛てにパスワードリセット用リンクを送ります。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordRequest"
      responses:
        '200':
          description: "メール送信成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthGenericResponse"
        '400':
          description: "該当ユーザーが存在しないなど"

  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: "パスワードリセット適用"
      description: "リセットトークンを用いて新パスワードを設定します。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequest"
      responses:
        '200':
          description: "パスワードリセット成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthGenericResponse"
        '400':
          description: "リセットトークンが無効など"

  /auth/verify-email:
    post:
      tags:
        - Auth
      summary: "メールアドレスの検証"
      description: "メール検証用トークンを指定して、メールアドレスを有効化します。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyEmailRequest"
      responses:
        '200':
          description: "メールアドレスの検証成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthGenericResponse"
        '400':
          description: "検証失敗"

  /auth/logout:
    post:
      tags:
        - Auth
      summary: "ログアウト"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "ログアウト成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthGenericResponse"
        '401':
          description: "認証エラー"

  /auth/delete:
    delete:
      tags:
        - Auth
      summary: "アカウント削除"
      description: "ログイン中のユーザーをSupabaseから削除します。"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "アカウント削除成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthGenericResponse"
        '401':
          description: "認証エラー"

  /auth/update-email:
    patch:
      tags:
        - Auth
      summary: "メールアドレス更新"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEmailRequest"
      responses:
        '200':
          description: "メールアドレス更新成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthGenericResponse"
        '400':
          description: "既に使用されているメールなど"
        '401':
          description: "認証エラー"

  /auth/update-username:
    patch:
      tags:
        - Auth
      summary: "ユーザー名更新"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUsernameRequest"
      responses:
        '200':
          description: "ユーザー名更新成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthGenericResponse"
        '400':
          description: "既に使用されているユーザー名など"
        '401':
          description: "認証エラー"

  /auth/update-password:
    patch:
      tags:
        - Auth
      summary: "パスワード更新"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordRequest"
      responses:
        '200':
          description: "パスワード更新成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthGenericResponse"
        '401':
          description: "旧パスワード不一致など認証エラー"

  /auth/profile:
    get:
      tags:
        - Auth
      summary: "ログインユーザーのプロフィール取得"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "プロフィール取得成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthGenericResponse"
        '401':
          description: "認証エラー"

  # 2. Favorites
  /favorites:
    get:
      tags:
        - Favorites
      summary: "ユーザーのお気に入り一覧"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "お気に入り一覧取得成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FavoriteListResponse"
        '401':
          description: "認証エラー"

  /favorites/{feedItemId}/is-favorited:
    get:
      tags:
        - Favorites
      summary: "指定フィードアイテムがお気に入りか確認"
      security:
        - bearerAuth: []
      parameters:
        - name: feedItemId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "お気に入り状態確認"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FavoriteCheckResponse"
        '401':
          description: "認証エラー"

  /favorites/{feedItemId}:
    post:
      tags:
        - Favorites
      summary: "特定フィードアイテムをお気に入り登録"
      security:
        - bearerAuth: []
      parameters:
        - name: feedItemId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: "お気に入り登録成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FavoriteResponse"
        '400':
          description: "既に登録済みなど"
        '401':
          description: "認証エラー"

    delete:
      tags:
        - Favorites
      summary: "特定フィードアイテムのお気に入りを解除"
      security:
        - bearerAuth: []
      parameters:
        - name: feedItemId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "お気に入り解除成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericMessageResponse"
        '401':
          description: "認証エラー"

  # 3. Feed (Subscriptions & Feed Items)
  /feed/subscriptions:
    get:
      tags:
        - Feed
      summary: "ユーザーの購読一覧を取得"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "購読一覧取得成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionListResponse"
        '401':
          description: "認証エラー"

    post:
      tags:
        - Feed
      summary: "新規購読を追加"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddSubscriptionRequest"
      responses:
        '201':
          description: "購読追加成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddSubscriptionResponse"
        '400':
          description: "不正なURLなど"
        '401':
          description: "認証エラー"

  /feed/subscriptions/{subscriptionId}/fetch:
    post:
      tags:
        - Feed
      summary: "購読フィードを手動で取得"
      security:
        - bearerAuth: []
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "RSS取得成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FetchSubscriptionResponse"
        '400':
          description: "購読IDが存在しないなど"
        '401':
          description: "認証エラー"

  /feed/subscriptions/{subscriptionId}/items:
    get:
      tags:
        - Feed
      summary: "指定購読に紐づくフィードアイテム一覧を取得"
      security:
        - bearerAuth: []
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "フィードアイテム一覧取得成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedItemListResponse"
        '401':
          description: "認証エラー"

  /feed/subscriptions/{subscriptionId}:
    patch:
      tags:
        - Feed
      summary: "購読情報の更新"
      security:
        - bearerAuth: []
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSubscriptionRequest"
      responses:
        '200':
          description: "更新成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionResponse"
        '400':
          description: "購読IDが存在しないなど"
        '401':
          description: "認証エラー"

    delete:
      tags:
        - Feed
      summary: "購読削除"
      security:
        - bearerAuth: []
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "削除成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericMessageResponse"
        '400':
          description: "購読IDが存在しないなど"
        '401':
          description: "認証エラー"

  # 4. Tags
  /tags:
    get:
      tags:
        - Tags
      summary: "ユーザーが持つ全タグの取得"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "タグ一覧取得成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagListResponse"
        '401':
          description: "認証エラー"

    post:
      tags:
        - Tags
      summary: "新規タグ作成"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTagRequest"
      responses:
        '201':
          description: "タグ作成成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagResponse"
        '400':
          description: "重複・データ不備"
        '401':
          description: "認証エラー"

  /tags/{tagId}:
    patch:
      tags:
        - Tags
      summary: "既存タグの更新（名前・親タグなど）"
      security:
        - bearerAuth: []
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTagRequest"
      responses:
        '200':
          description: "タグ更新成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagResponse"
        '400':
          description: "更新内容不備"
        '401':
          description: "認証エラー"

    delete:
      tags:
        - Tags
      summary: "タグ削除"
      security:
        - bearerAuth: []
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "タグ削除成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericMessageResponse"
        '401':
          description: "認証エラー"

  /tags/feed-items/{feedItemId}:
    get:
      tags:
        - Tags
      summary: "特定フィードアイテムに紐づくタグ一覧を取得"
      security:
        - bearerAuth: []
      parameters:
        - name: feedItemId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "タグ一覧取得成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedItemTagListResponse"
        '401':
          description: "認証エラー"

    post:
      tags:
        - Tags
      summary: "フィードアイテムにタグを付与"
      security:
        - bearerAuth: []
      parameters:
        - name: feedItemId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttachTagRequest"
      responses:
        '200':
          description: "タグ付与成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericMessageResponse"
        '401':
          description: "認証エラー"

    delete:
      tags:
        - Tags
      summary: "フィードアイテムからタグを除去"
      security:
        - bearerAuth: []
      parameters:
        - name: feedItemId
          in: path
          required: true
          schema:
            type: integer
        - name: tagId
          in: query
          required: true
          schema:
            type: integer
          description: "クエリパラメータでtagId指定"
      responses:
        '200':
          description: "タグ除去成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericMessageResponse"
        '401':
          description: "認証エラー"

  /tags/subscriptions/{subscriptionId}:
    get:
      tags:
        - Tags
      summary: "特定購読に紐づくタグ一覧を取得"
      security:
        - bearerAuth: []
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "タグ一覧取得成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionTagListResponse"
        '401':
          description: "認証エラー"

    post:
      tags:
        - Tags
      summary: "購読にタグを付与"
      security:
        - bearerAuth: []
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttachTagRequest"
      responses:
        '200':
          description: "タグ付与成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericMessageResponse"
        '401':
          description: "認証エラー"

    delete:
      tags:
        - Tags
      summary: "購読からタグを除去"
      security:
        - bearerAuth: []
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema:
            type: integer
        - name: tagId
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "タグ除去成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericMessageResponse"
        '401':
          description: "認証エラー"

  # 5. Health Check
  /health:
    get:
      tags:
        - Health
      summary: "サービスの状態確認"
      description: "DB接続やBull Queueの稼働状況をチェックします。"
      responses:
        '200':
          description: "ヘルスチェック成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckOk"
        '503':
          description: "サービス不調"


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Auth関連
    SignUpRequest:
      type: object
      required: [email, password, username]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        username:
          type: string
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    ForgotPasswordRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email
    ResetPasswordRequest:
      type: object
      required: [accessToken, newPassword]
      properties:
        accessToken:
          type: string
          description: "パスワードリセット用トークン"
        newPassword:
          type: string
          format: password
    VerifyEmailRequest:
      type: object
      required: [email, token]
      properties:
        email:
          type: string
          format: email
        token:
          type: string
          description: "メール検証用トークン"

    UpdateEmailRequest:
      type: object
      required: [newEmail]
      properties:
        newEmail:
          type: string
          format: email
    UpdateUsernameRequest:
      type: object
      required: [newUsername]
      properties:
        newUsername:
          type: string
    UpdatePasswordRequest:
      type: object
      required: [oldPassword, newPassword]
      properties:
        oldPassword:
          type: string
          format: password
        newPassword:
          type: string
          format: password

    AuthGenericResponse:
      type: object
      properties:
        message:
          type: string
        data:
          description: "Supabaseのセッションやユーザー情報など"
          type: object
          additionalProperties: true

    # Favorites
    FavoriteRow:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: string
          format: uuid
        feed_item_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    FavoriteListResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/FavoriteRow"
    FavoriteCheckResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: object
          properties:
            favorited:
              type: boolean
    FavoriteResponse:
      type: object
      properties:
        message:
          type: string
        data:
          $ref: "#/components/schemas/FavoriteRow"

    # Feed関連 (Subscriptions, Feed Items)
    SubscriptionRow:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: string
          format: uuid
        feed_url:
          type: string
        feed_title:
          type: string
        refresh_interval:
          type: string
          enum:
            - 5minute
            - 10minute
            - 30minute
            - 1hour
            - 2hour
            - 4hour
            - 6hour
            - 12hour
        last_fetched_at:
          type: string
          format: date-time
          nullable: true
        next_fetch_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    SubscriptionListResponse:
      type: object
      properties:
        message:
          type: string
          default: "Subscription list fetched"
        data:
          type: array
          items:
            $ref: "#/components/schemas/SubscriptionRow"

    AddSubscriptionRequest:
      type: object
      required: [feedUrl]
      properties:
        feedUrl:
          type: string
    AddSubscriptionResponse:
      type: object
      properties:
        message:
          type: string
        data:
          $ref: "#/components/schemas/SubscriptionRow"

    UpdateSubscriptionRequest:
      type: object
      properties:
        refresh_interval:
          type: string
          enum:
            - 5minute
            - 10minute
            - 30minute
            - 1hour
            - 2hour
            - 4hour
            - 6hour
            - 12hour
        feed_title:
          type: string

    SubscriptionResponse:
      type: object
      properties:
        message:
          type: string
        data:
          $ref: "#/components/schemas/SubscriptionRow"

    FetchSubscriptionResponse:
      type: object
      properties:
        message:
          type: string
          default: "Feed fetched successfully"
        data:
          type: object
          properties:
            feedTitle:
              type: string
            insertedCount:
              type: integer
            lastFetchedAt:
              type: string
              format: date-time
            nextFetchAt:
              type: string
              format: date-time

    FeedItemRow:
      type: object
      properties:
        id:
          type: integer
        user_subscription_id:
          type: integer
        user_id:
          type: string
          format: uuid
        title:
          type: string
        link:
          type: string
        description:
          type: string
          nullable: true
        published_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    FeedItemListResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/FeedItemRow"

    # Tags
    TagRow:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: string
          format: uuid
        tag_name:
          type: string
        parent_tag_id:
          type: integer
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    TagListResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/TagRow"

    CreateTagRequest:
      type: object
      required: [tagName]
      properties:
        tagName:
          type: string
        parentTagId:
          type: integer
          nullable: true

    UpdateTagRequest:
      type: object
      properties:
        newName:
          type: string
        newParentTagId:
          type: integer
          nullable: true

    TagResponse:
      type: object
      properties:
        message:
          type: string
        data:
          $ref: "#/components/schemas/TagRow"

    # feed_item_tags 取得時など
    FeedItemTagListResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              user_id:
                type: string
                format: uuid
              feed_item_id:
                type: integer
              tag_id:
                type: integer
              created_at:
                type: string
                format: date-time
              updated_at:
                type: string
                format: date-time
              tag:
                $ref: "#/components/schemas/TagRow"

    # user_subscription_tags 取得時など
    SubscriptionTagListResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              user_id:
                type: string
                format: uuid
              user_subscription_id:
                type: integer
              tag_id:
                type: integer
              created_at:
                type: string
                format: date-time
              updated_at:
                type: string
                format: date-time
              tag:
                $ref: "#/components/schemas/TagRow"

    AttachTagRequest:
      type: object
      required: [tagId]
      properties:
        tagId:
          type: integer

    # Health Check
    HealthCheckOk:
      type: object
      properties:
        status:
          type: string
          default: "OK"
        db:
          type: string
          default: "OK"
        bullQueue:
          type: object
          properties:
            status:
              type: string
            jobCounts:
              type: object
              description: "各ステータスのジョブ数"

    # Utility
    GenericMessageResponse:
      type: object
      properties:
        message:
          type: string